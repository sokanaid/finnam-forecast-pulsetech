"""
Feature Engineering - —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏–∑ –∫–æ—Ç–∏—Ä–æ–≤–æ–∫ –∏ –Ω–æ–≤–æ—Å—Ç–µ–π
"""
import pandas as pd
import numpy as np
from typing import Optional
import warnings
warnings.filterwarnings('ignore')

from src.config import WINDOW_SIZE, RANDOM_SEED


class FeatureEngineer:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
    
    def __init__(self, window_size=WINDOW_SIZE):
        self.window_size = window_size
        self.news_embeddings = None
        
    def create_price_features(self, df: pd.DataFrame) -> pd.DataFrame:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏–∑ –∫–æ—Ç–∏—Ä–æ–≤–æ–∫
        
        –°–æ–∑–¥–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:
        - –ú–æ–º–µ–Ω—Ç—É–º (–∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ N –¥–Ω–µ–π)
        - –°–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ
        - –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        - RSI (Relative Strength Index)
        - MACD
        - Bollinger Bands
        """
        print("\nüîß –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏–∑ –∫–æ—Ç–∏—Ä–æ–≤–æ–∫...")
        
        df = df.sort_values(['ticker', 'begin']).reset_index(drop=True)
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–∫–µ—Ä–∞–º –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        for ticker in df['ticker'].unique():
            mask = df['ticker'] == ticker
            ticker_data = df[mask].copy()
            
            # 1. –ë–∞–∑–æ–≤—ã–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
            ticker_data['return_1d'] = ticker_data['close'].pct_change(1)
            ticker_data['return_5d'] = ticker_data['close'].pct_change(5)
            ticker_data['return_10d'] = ticker_data['close'].pct_change(10)
            ticker_data['return_20d'] = ticker_data['close'].pct_change(20)
            
            # 2. –°–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ
            ticker_data['ma_5'] = ticker_data['close'].rolling(5).mean()
            ticker_data['ma_10'] = ticker_data['close'].rolling(10).mean()
            ticker_data['ma_20'] = ticker_data['close'].rolling(20).mean()
            
            # 3. –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Å–∫–æ–ª—å–∑—è—â–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö
            ticker_data['dist_ma_5'] = (ticker_data['close'] - ticker_data['ma_5']) / ticker_data['ma_5']
            ticker_data['dist_ma_10'] = (ticker_data['close'] - ticker_data['ma_10']) / ticker_data['ma_10']
            ticker_data['dist_ma_20'] = (ticker_data['close'] - ticker_data['ma_20']) / ticker_data['ma_20']
            
            # 4. –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (std –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–µ–π)
            ticker_data['volatility_5'] = ticker_data['return_1d'].rolling(5).std()
            ticker_data['volatility_10'] = ticker_data['return_1d'].rolling(10).std()
            ticker_data['volatility_20'] = ticker_data['return_1d'].rolling(20).std()
            
            # 5. High-Low —Å–ø—Ä–µ–¥ (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π)
            ticker_data['hl_spread'] = (ticker_data['high'] - ticker_data['low']) / ticker_data['close']
            ticker_data['hl_spread_ma5'] = ticker_data['hl_spread'].rolling(5).mean()
            
            # 6. –û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ (–ª–æ–≥–∞—Ä–∏—Ñ–º –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è)
            ticker_data['volume_log'] = np.log1p(ticker_data['volume'])
            ticker_data['volume_ma5'] = ticker_data['volume'].rolling(5).mean()
            ticker_data['volume_ratio'] = ticker_data['volume'] / (ticker_data['volume_ma5'] + 1e-8)
            
            # 7. RSI (Relative Strength Index)
            ticker_data['rsi_14'] = self._calculate_rsi(ticker_data['close'], period=14)
            
            # 8. MACD
            ema_12 = ticker_data['close'].ewm(span=12, adjust=False).mean()
            ema_26 = ticker_data['close'].ewm(span=26, adjust=False).mean()
            ticker_data['macd'] = ema_12 - ema_26
            ticker_data['macd_signal'] = ticker_data['macd'].ewm(span=9, adjust=False).mean()
            ticker_data['macd_diff'] = ticker_data['macd'] - ticker_data['macd_signal']
            
            # 9. Bollinger Bands
            ticker_data['bb_middle'] = ticker_data['close'].rolling(20).mean()
            bb_std = ticker_data['close'].rolling(20).std()
            ticker_data['bb_upper'] = ticker_data['bb_middle'] + 2 * bb_std
            ticker_data['bb_lower'] = ticker_data['bb_middle'] - 2 * bb_std
            ticker_data['bb_position'] = (ticker_data['close'] - ticker_data['bb_lower']) / (
                ticker_data['bb_upper'] - ticker_data['bb_lower'] + 1e-8
            )
            
            # 10. –¢—Ä–µ–Ω–¥ (–ª–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è slope)
            ticker_data['trend_5'] = ticker_data['close'].rolling(5).apply(
                lambda x: self._calculate_slope(x), raw=True
            )
            ticker_data['trend_10'] = ticker_data['close'].rolling(10).apply(
                lambda x: self._calculate_slope(x), raw=True
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º DataFrame
            for col in ticker_data.columns:
                if col not in df.columns or col.startswith(('return_', 'ma_', 'dist_', 'volatility_',
                                                             'hl_', 'volume_', 'rsi_', 'macd', 'bb_',
                                                             'trend_')):
                    df.loc[mask, col] = ticker_data[col].values
        
        print(f"   ‚úì –°–æ–∑–¥–∞–Ω–æ {len([c for c in df.columns if any(c.startswith(p) for p in ['return_', 'ma_', 'dist_', 'volatility_', 'hl_', 'volume_', 'rsi_', 'macd', 'bb_', 'trend_'])])} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏–∑ –∫–æ—Ç–∏—Ä–æ–≤–æ–∫")
        
        return df
    
    def _calculate_rsi(self, prices: pd.Series, period: int = 14) -> pd.Series:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ RSI"""
        delta = prices.diff()
        gain = (delta.where(delta > 0, 0)).rolling(window=period).mean()
        loss = (-delta.where(delta < 0, 0)).rolling(window=period).mean()
        rs = gain / (loss + 1e-8)
        rsi = 100 - (100 / (1 + rs))
        return rsi
    
    def _calculate_slope(self, y: np.ndarray) -> float:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –Ω–∞–∫–ª–æ–Ω–∞ –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏"""
        if len(y) < 2 or np.isnan(y).any():
            return 0
        x = np.arange(len(y))
        slope = np.polyfit(x, y, 1)[0]
        return slope
    
    def create_news_features(self, candles_df: pd.DataFrame, news_df: pd.DataFrame, 
                            use_embeddings: bool = False) -> pd.DataFrame:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π
        
        –î–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è –∏ —Ç–∏–∫–µ—Ä–∞ –∞–≥—Ä–µ–≥–∏—Ä—É–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π
        
        Args:
            candles_df: DataFrame —Å –∫–æ—Ç–∏—Ä–æ–≤–∫–∞–º–∏
            news_df: DataFrame —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏  
            use_embeddings: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ (—Ç—Ä–µ–±—É–µ—Ç –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏)
        """
        print("\nüì∞ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π...")
        
        df = candles_df.copy()
        
        # –ë–∞–∑–æ–≤—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
        df['news_count_1d'] = 0
        df['news_count_7d'] = 0
        df['news_count_30d'] = 0
        df['news_sentiment_score'] = 0.5  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        df['news_title_length_mean'] = 0
        df['news_has_ticker'] = 0
        
        # –î–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ candles –Ω–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
        for idx, row in df.iterrows():
            ticker = row['ticker']
            date = row['begin']
            
            # –ù–æ–≤–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å (—Å —É—á–µ—Ç–æ–º –∑–∞–¥–µ—Ä–∂–∫–∏ –≤ 1 –¥–µ–Ω—å)
            news_1d = news_df[
                (news_df['publish_date'] >= date - pd.Timedelta(days=2)) &
                (news_df['publish_date'] < date) &
                (news_df['tickers'].str.contains(ticker, na=False, regex=False) |
                 news_df['title'].str.contains(ticker, na=False, case=False) |
                 news_df['publication'].str.contains(ticker, na=False, case=False))
            ]
            
            # –ù–æ–≤–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
            news_7d = news_df[
                (news_df['publish_date'] >= date - pd.Timedelta(days=8)) &
                (news_df['publish_date'] < date) &
                (news_df['tickers'].str.contains(ticker, na=False, regex=False) |
                 news_df['title'].str.contains(ticker, na=False, case=False) |
                 news_df['publication'].str.contains(ticker, na=False, case=False))
            ]
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π
            df.at[idx, 'news_count_1d'] = len(news_1d)
            df.at[idx, 'news_count_7d'] = len(news_7d)
            
            # –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            if len(news_7d) > 0:
                df.at[idx, 'news_title_length_mean'] = news_7d['title'].str.len().mean()
                df.at[idx, 'news_has_ticker'] = 1
                
                # –ü—Ä–æ—Å—Ç–æ–π sentiment score –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
                sentiment_score = self._simple_sentiment(news_7d)
                df.at[idx, 'news_sentiment_score'] = sentiment_score
            
            if idx % 1000 == 0:
                print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {idx}/{len(df)} —Å—Ç—Ä–æ–∫...", end='\r')
        
        print(f"\n   ‚úì –°–æ–∑–¥–∞–Ω–æ {len([c for c in df.columns if c.startswith('news_')])} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π")
        
        return df
    
    def _simple_sentiment(self, news_df: pd.DataFrame) -> float:
        """
        –ü—Ä–æ—Å—Ç–æ–π sentiment analysis –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        
        Returns:
            float: sentiment score –æ—Ç 0 (–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π) –¥–æ 1 (–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π)
        """
        if len(news_df) == 0:
            return 0.5
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        positive_words = ['—Ä–æ—Å—Ç', '–ø—Ä–∏–±—ã–ª—å', '—É—Å–ø–µ—Ö', '—É–≤–µ–ª–∏—á–µ–Ω–∏–µ', '—Ä–∞–∑–≤–∏—Ç–∏–µ', 
                         '–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω', '–≤—ã–≥–æ–¥–Ω', '—É–ª—É—á—à–µ–Ω–∏–µ', '–ø–æ–≤—ã—à–µ–Ω–∏–µ']
        negative_words = ['—É–±—ã—Ç', '—Å–Ω–∏–∂–µ–Ω–∏–µ', '–ø–∞–¥–µ–Ω–∏–µ', '–∫—Ä–∏–∑–∏—Å', '—Ä–∏—Å–∫',
                         '–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω', '–ø—Ä–æ–±–ª–µ–º', '—É—Ö—É–¥—à–µ–Ω–∏–µ', '–ø–æ—Ç–µ—Ä']
        
        sentiment_scores = []
        
        for _, row in news_df.iterrows():
            text = (str(row['title']) + ' ' + str(row['publication'])).lower()
            
            pos_count = sum(1 for word in positive_words if word in text)
            neg_count = sum(1 for word in negative_words if word in text)
            
            if pos_count + neg_count > 0:
                score = pos_count / (pos_count + neg_count)
            else:
                score = 0.5
            
            sentiment_scores.append(score)
        
        return np.mean(sentiment_scores) if sentiment_scores else 0.5
    
    def fill_missing_values(self, df: pd.DataFrame) -> pd.DataFrame:
        """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π"""
        print("\nüîÑ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π...")
        
        # –ß–∏—Å–ª–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        numeric_cols = df.select_dtypes(include=[np.number]).columns
        feature_cols = [col for col in numeric_cols if not col.startswith('target_')]
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º NaN –º–µ–¥–∏–∞–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–∫–µ—Ä–∞
        for ticker in df['ticker'].unique():
            mask = df['ticker'] == ticker
            df.loc[mask, feature_cols] = df.loc[mask, feature_cols].fillna(
                df.loc[mask, feature_cols].median()
            )
        
        # –û—Å—Ç–∞–≤—à–∏–µ—Å—è NaN –∑–∞–ø–æ–ª–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–π –º–µ–¥–∏–∞–Ω–æ–π
        df[feature_cols] = df[feature_cols].fillna(df[feature_cols].median())
        
        # –§–∏–Ω–∞–ª—å–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω—É–ª—è–º–∏ (–µ—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å NaN)
        df[feature_cols] = df[feature_cols].fillna(0)
        
        print(f"   ‚úì –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã")
        
        return df
    
    def get_feature_columns(self, df: pd.DataFrame) -> list:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–ª–æ–Ω–æ–∫ —Å –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏ (–∏—Å–∫–ª—é—á–∞—è target –∏ —Å–ª—É–∂–µ–±–Ω—ã–µ)"""
        exclude_prefixes = ['target_', 'Unnamed']
        exclude_cols = ['ticker', 'begin', 'open', 'close', 'high', 'low', 'volume']
        
        feature_cols = [col for col in df.columns 
                       if col not in exclude_cols 
                       and not any(col.startswith(prefix) for prefix in exclude_prefixes)]
        
        return feature_cols

