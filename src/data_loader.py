"""
–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
"""
import pandas as pd
import numpy as np
from pathlib import Path
from typing import Tuple, Optional
import warnings
warnings.filterwarnings('ignore')

from src.config import (
    TRAIN_CANDLES, TRAIN_NEWS,
    PUBLIC_TEST_CANDLES, PRIVATE_TEST_CANDLES, TEST_NEWS
)
from src.ticker_extractor import TickerExtractor


class DataLoader:
    """–ö–ª–∞—Å—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self):
        self.train_candles = None
        self.train_news = None
        self.test_candles = None
        self.test_news = None
        self.all_candles = None
        self.ticker_extractor = TickerExtractor()
        
    def load_data(self, mode='train'):
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            mode: 'train' –∏–ª–∏ 'test'
        """
        print(f"üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö (—Ä–µ–∂–∏–º: {mode})...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—Ç–∏—Ä–æ–≤–∫–∏
        if mode == 'train' or self.train_candles is None:
            self.train_candles = pd.read_csv(TRAIN_CANDLES)
            self.train_candles['begin'] = pd.to_datetime(self.train_candles['begin'])
            # –°–æ–∑–¥–∞–µ–º ID —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–≤–º–µ—Å—Ç–æ ticker)
            self.train_candles['row_id'] = range(len(self.train_candles))
            ticker_info = f", {self.train_candles['ticker'].nunique()} —Ç–∏–∫–µ—Ä–æ–≤" if 'ticker' in self.train_candles.columns else ""
            print(f"   ‚úì Train candles: {len(self.train_candles)} —Å—Ç—Ä–æ–∫{ticker_info}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
        if mode == 'train' or self.train_news is None:
            self.train_news = pd.read_csv(TRAIN_NEWS)
            self.train_news['publish_date'] = pd.to_datetime(self.train_news['publish_date'])
            print(f"   ‚úì Train news: {len(self.train_news)} –Ω–æ–≤–æ—Å—Ç–µ–π")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        public_test = pd.read_csv(PUBLIC_TEST_CANDLES)
        public_test['begin'] = pd.to_datetime(public_test['begin'])
        
        private_test = pd.read_csv(PRIVATE_TEST_CANDLES)
        private_test['begin'] = pd.to_datetime(private_test['begin'])
        
        self.test_candles = pd.concat([public_test, private_test], ignore_index=True)
        print(f"   ‚úì Test candles: {len(self.test_candles)} —Å—Ç—Ä–æ–∫ "
              f"(public: {len(public_test)}, private: {len(private_test)})")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
        self.test_news = pd.read_csv(TEST_NEWS)
        self.test_news['publish_date'] = pd.to_datetime(self.test_news['publish_date'])
        print(f"   ‚úì Test news: {len(self.test_news)} –Ω–æ–≤–æ—Å—Ç–µ–π")
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        self.all_candles = pd.concat([self.train_candles, self.test_candles], 
                                      ignore_index=True)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º/–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–∫–µ—Ä—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if 'ticker' not in self.all_candles.columns or self.all_candles['ticker'].isna().any():
            print("\n   ‚ö†Ô∏è  –ö–æ–ª–æ–Ω–∫–∞ 'ticker' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç NaN")
            print("   üîç –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–∫–µ—Ä—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏...")
            self.all_candles = self.ticker_extractor.infer_ticker_from_candles(self.all_candles)
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º inferred_ticker –∫–∞–∫ ticker
            if 'inferred_ticker' in self.all_candles.columns:
                self.all_candles['ticker'] = self.all_candles['inferred_ticker']
        
        self.all_candles = self.all_candles.sort_values(['ticker', 'begin']).reset_index(drop=True)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏
        self.all_news = pd.concat([self.train_news, self.test_news], 
                                   ignore_index=True)
        self.all_news = self.all_news.sort_values('publish_date').reset_index(drop=True)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–∫–µ—Ä—ã –∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if 'tickers' not in self.all_news.columns or self.all_news['tickers'].isna().all():
            self.all_news = self.ticker_extractor.extract_tickers_from_news(self.all_news)
        
        print(f"   ‚úì Total candles: {len(self.all_candles)} —Å—Ç—Ä–æ–∫")
        print(f"   ‚úì Total news: {len(self.all_news)} –Ω–æ–≤–æ—Å—Ç–µ–π")
        
        return self
    
    def get_train_data(self) -> pd.DataFrame:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—É—á–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ"""
        return self.train_candles.copy()
    
    def get_test_data(self) -> pd.DataFrame:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        return self.test_candles.copy()
    
    def get_all_candles(self) -> pd.DataFrame:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏ (train + test)"""
        return self.all_candles.copy()
    
    def get_all_news(self) -> pd.DataFrame:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ (train + test)"""
        return self.all_news.copy()
    
    def prepare_targets_for_horizons(self, df: pd.DataFrame) -> pd.DataFrame:
        """
        –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Ç–∞—Ä–≥–µ—Ç—ã –¥–ª—è –≤—Å–µ—Ö 20 –≥–æ—Ä–∏–∑–æ–Ω—Ç–æ–≤
        
        –î–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è t –≤—ã—á–∏—Å–ª—è–µ–º –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –¥–Ω–µ–π t+1, t+2, ..., t+20
        """
        print("\nüéØ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–∞—Ä–≥–µ—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö –≥–æ—Ä–∏–∑–æ–Ω—Ç–æ–≤...")
        
        df = df.sort_values(['ticker', 'begin']).reset_index(drop=True)
        
        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞ —Å–æ–∑–¥–∞–µ–º —Ç–∞—Ä–≥–µ—Ç—ã
        for horizon in range(1, 21):
            # –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∑–∞ horizon –¥–Ω–µ–π
            df[f'target_return_{horizon}d'] = df.groupby('ticker')['close'].transform(
                lambda x: x.shift(-horizon) / x - 1
            )
            
            # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (0 –∏–ª–∏ 1)
            df[f'target_direction_{horizon}d'] = (
                df[f'target_return_{horizon}d'] > 0
            ).astype(int)
        
        print(f"   ‚úì –°–æ–∑–¥–∞–Ω–æ {20} –ø–∞—Ä —Ç–∞—Ä–≥–µ—Ç–æ–≤ (return + direction)")
        
        return df
    
    def get_tickers(self) -> list:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∏–∫–µ—Ä–æ–≤"""
        return sorted(self.all_candles['ticker'].unique().tolist())
    
    def get_date_range(self) -> Tuple[pd.Timestamp, pd.Timestamp]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç"""
        return (
            self.all_candles['begin'].min(),
            self.all_candles['begin'].max()
        )

