"""
–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–æ–≤ –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
"""
import pandas as pd
import numpy as np
import re
from typing import List, Optional


class TickerExtractor:
    """–ö–ª–∞—Å—Å –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ä–æ–≤"""
    
    # –°–ø–∏—Å–æ–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —Ç–∏–∫–µ—Ä–æ–≤
    KNOWN_TICKERS = [
        'SBER', 'GAZP', 'LKOH', 'GMKN', 'NVTK', 'ROSN', 'TATN', 
        'MGNT', 'MTSS', 'ALRS', 'SNGS', 'NLMK', 'CHMF', 'VTBR',
        'YNDX', 'PLZL', 'AFLT', 'MOEX', 'RTKM', 'FEES', 'HYDR',
        'IRAO', 'PHOR', 'RUAL', 'TCSG', 'AFKS', 'PIKK', 'POLY',
        'MAIL', 'OZON', 'FIXP', 'CBOM', 'TRNFP', 'UPRO', 'MAGN'
    ]
    
    # –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–º–ø–∞–Ω–∏–π —Ç–∏–∫–µ—Ä–∞–º (–¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ —Ç–µ–∫—Å—Ç–µ)
    COMPANY_TO_TICKER = {
        '—Å–±–µ—Ä': 'SBER', '—Å–±–µ—Ä–±–∞–Ω–∫': 'SBER',
        '–≥–∞–∑–ø—Ä–æ–º': 'GAZP',
        '–ª—É–∫–æ–π–ª': 'LKOH', 'lukoil': 'LKOH',
        '–Ω–æ—Ä–Ω–∏–∫–µ–ª—å': 'GMKN', '–Ω–æ—Ä–∏–ª—å—Å–∫–∏–π –Ω–∏–∫–µ–ª—å': 'GMKN',
        '–Ω–æ–≤–∞—Ç—ç–∫': 'NVTK', 'novatek': 'NVTK',
        '—Ä–æ—Å–Ω–µ—Ñ—Ç—å': 'ROSN',
        '—Ç–∞—Ç–Ω–µ—Ñ—Ç—å': 'TATN',
        '–º–∞–≥–Ω–∏—Ç': 'MGNT',
        '–º—Ç—Å': 'MTSS',
        '–∞–ª—Ä–æ—Å–∞': 'ALRS',
        '—Å—É—Ä–≥—É—Ç–Ω–µ—Ñ—Ç–µ–≥–∞–∑': 'SNGS',
        '–Ω–ª–º–∫': 'NLMK', '–Ω–æ–≤–æ–ª–∏–ø–µ—Ü–∫': 'NLMK',
        '—Å–µ–≤–µ—Ä—Å—Ç–∞–ª—å': 'CHMF',
        '–≤—Ç–±': 'VTBR',
        '—è–Ω–¥–µ–∫—Å': 'YNDX', 'yandex': 'YNDX',
        '–ø–æ–ª—é—Å': 'PLZL',
        '–∞—ç—Ä–æ—Ñ–ª–æ—Ç': 'AFLT',
        '–º–æ—Å–±–∏—Ä–∂–∞': 'MOEX', '–º–æ—Å–∫–æ–≤—Å–∫–∞—è –±–∏—Ä–∂–∞': 'MOEX',
        '—Ä–æ—Å—Ç–µ–ª–µ–∫–æ–º': 'RTKM',
        '—Ñ—Å–∫': 'FEES', '—Ñ—Å–∫ –µ—ç—Å': 'FEES',
        '—Ä—É—Å–≥–∏–¥—Ä–æ': 'HYDR',
        '–∏–Ω—Ç–µ—Ä —Ä–∞–æ': 'IRAO',
        '—Ñ–æ—Å–∞–≥—Ä–æ': 'PHOR',
        '—Ä—É—Å–∞–ª': 'RUAL',
        '—Ç–∏–Ω—å–∫–æ—Ñ—Ñ': 'TCSG', '—Ç–∏–Ω—å–∫–æ—Ñ': 'TCSG', '—Ç–∏–Ω—å–∫–æ–≤': 'TCSG', 'tcs': 'TCSG',
        '–∞—Ñ–∫ —Å–∏—Å—Ç–µ–º–∞': 'AFKS', '—Å–∏—Å—Ç–µ–º–∞': 'AFKS',
        '–ø–∏–∫': 'PIKK',
        '–ø–æ–ª–∏–º–µ—Ç–∞–ª–ª': 'POLY',
        'mail': 'MAIL', '–º—ç–π–ª': 'MAIL',
        '–æ–∑–æ–Ω': 'OZON', 'ozon': 'OZON',
        'fix price': 'FIXP', '—Ñ–∏–∫—Å –ø—Ä–∞–π—Å': 'FIXP',
        '—Å–æ–≤–∫–æ–º–±–∞–Ω–∫': 'CBOM',
        '—Ç—Ä–∞–Ω—Å–Ω–µ—Ñ—Ç—å': 'TRNFP',
        '—é–Ω–∏–ø—Ä–æ': 'UPRO',
        '–º–º–∫': 'MAGN', '–º–∞–≥–Ω–∏—Ç–æ–≥–æ—Ä—Å–∫': 'MAGN'
    }
    
    def __init__(self):
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞
        self.ticker_pattern = re.compile(r'\b(' + '|'.join(self.KNOWN_TICKERS) + r')\b', re.IGNORECASE)
        
    def extract_tickers_from_text(self, text: str) -> List[str]:
        """
        –ò–∑–≤–ª–µ—á—å —Ç–∏–∫–µ—Ä—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤
        """
        if pd.isna(text) or not text:
            return []
        
        text = str(text).lower()
        tickers = set()
        
        # 1. –ò—â–µ–º –ø—Ä—è–º—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ç–∏–∫–µ—Ä–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "SBER")
        direct_matches = self.ticker_pattern.findall(text)
        tickers.update([t.upper() for t in direct_matches])
        
        # 2. –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–π
        for company, ticker in self.COMPANY_TO_TICKER.items():
            if company in text:
                tickers.add(ticker)
        
        return list(tickers)
    
    def extract_tickers_from_news(self, news_df: pd.DataFrame) -> pd.DataFrame:
        """
        –ò–∑–≤–ª–µ—á—å —Ç–∏–∫–µ—Ä—ã –∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π
        
        Args:
            news_df: DataFrame —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏
            
        Returns:
            DataFrame —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π –∫–æ–ª–æ–Ω–∫–æ–π 'tickers'
        """
        print("üîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–æ–≤ –∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π...")
        
        news_df = news_df.copy()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–∫–µ—Ä—ã –∏–∑ title –∏ publication
        news_df['tickers'] = news_df.apply(
            lambda row: self.extract_tickers_from_text(
                str(row.get('title', '')) + ' ' + str(row.get('publication', ''))
            ), axis=1
        )
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –≤ —Å—Ç—Ä–æ–∫—É —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
        news_df['tickers_str'] = news_df['tickers'].apply(
            lambda x: ','.join(x) if x else ''
        )
        
        found_count = (news_df['tickers'].str.len() > 0).sum()
        print(f"   ‚úì –ù–∞–π–¥–µ–Ω–æ —Ç–∏–∫–µ—Ä–æ–≤ –≤ {found_count}/{len(news_df)} –Ω–æ–≤–æ—Å—Ç—è—Ö")
        
        return news_df
    
    def infer_ticker_from_candles(self, candles_df: pd.DataFrame) -> pd.DataFrame:
        """
        –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–∫–µ—Ä –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏ –∫–æ—Ç–∏—Ä–æ–≤–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        
        –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—é –ø–æ:
        - –î–∏–∞–ø–∞–∑–æ–Ω—É —Ü–µ–Ω (price range)
        - –°—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω–µ
        - –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        - –û–±—ä–µ–º—É —Ç–æ—Ä–≥–æ–≤
        
        Args:
            candles_df: DataFrame —Å –∫–æ—Ç–∏—Ä–æ–≤–∫–∞–º–∏
            
        Returns:
            DataFrame —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π –∫–æ–ª–æ–Ω–∫–æ–π 'inferred_ticker'
        """
        print("\nüîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–æ–≤ –∏–∑ –∫–æ—Ç–∏—Ä–æ–≤–æ–∫...")
        
        df = candles_df.copy()
        
        # –ï—Å–ª–∏ —Ç–∏–∫–µ—Ä —É–∂–µ –µ—Å—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if 'ticker' in df.columns:
            df['inferred_ticker'] = df['ticker']
            print(f"   ‚úì –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–ª–æ–Ω–∫—É 'ticker'")
            return df
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
        df = df.sort_values('begin').reset_index(drop=True)
        
        # –ü—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏
        df['price_range'] = df['high'] - df['low']
        df['avg_price'] = (df['high'] + df['low']) / 2
        df['price_volatility'] = df['price_range'] / df['avg_price']
        df['log_volume'] = np.log1p(df['volume'])
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º rolling mean –¥–ª—è —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è
        window = 5
        df['avg_price_smooth'] = df['avg_price'].rolling(window, min_periods=1).mean()
        df['log_volume_smooth'] = df['log_volume'].rolling(window, min_periods=1).mean()
        
        # –ü—Ä–æ—Å—Ç–∞—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–Ω–æ–≤—ã—Ö —É—Ä–æ–≤–Ω–µ–π
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Ä–∞–∑–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã —Ç–æ—Ä–≥—É—é—Ç—Å—è –≤ —Ä–∞–∑–Ω—ã—Ö —Ü–µ–Ω–æ–≤—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–∞—Ö
        from sklearn.cluster import KMeans
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
        features = df[['avg_price_smooth', 'log_volume_smooth', 'price_volatility']].fillna(0)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ (–ø—Ä–∏–º–µ—Ä–Ω–æ 10-15 —Ç–∏–∫–µ—Ä–æ–≤)
        n_clusters = min(len(self.KNOWN_TICKERS), len(df) // 100)
        n_clusters = max(n_clusters, 10)  # –ú–∏–Ω–∏–º—É–º 10 –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
        
        if len(df) > n_clusters * 2:
            kmeans = KMeans(n_clusters=n_clusters, random_state=42, n_init=10)
            df['cluster'] = kmeans.fit_predict(features)
            
            # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º —Ç–∏–∫–µ—Ä—ã –∫–ª–∞—Å—Ç–µ—Ä–∞–º (—Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω–µ)
            cluster_prices = df.groupby('cluster')['avg_price'].mean().sort_values()
            cluster_to_ticker = {
                cluster: self.KNOWN_TICKERS[i % len(self.KNOWN_TICKERS)]
                for i, cluster in enumerate(cluster_prices.index)
            }
            
            df['inferred_ticker'] = df['cluster'].map(cluster_to_ticker)
        else:
            # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –º–∞–ª–æ, –ø—Ä–æ—Å—Ç–æ –Ω—É–º–µ—Ä—É–µ–º –≥—Ä—É–ø–ø—ã
            df['inferred_ticker'] = 'UNKNOWN'
        
        print(f"   ‚úì –û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ {df['inferred_ticker'].nunique()} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤")
        print(f"   –¢–∏–∫–µ—Ä—ã: {sorted(df['inferred_ticker'].unique())[:10]}...")
        
        return df
    
    def assign_tickers_by_sequence(self, candles_df: pd.DataFrame) -> pd.DataFrame:
        """
        –ë–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π –º–µ—Ç–æ–¥: –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º —Ç–∏–∫–µ—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        
        –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –∏ –∏–¥—É—Ç –±–ª–æ–∫–∞–º–∏ –ø–æ —Ç–∏–∫–µ—Ä–∞–º
        """
        print("\nüîç –ü—Ä–∏—Å–≤–æ–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–æ–≤ –ø–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
        
        df = candles_df.copy()
        
        # –ï—Å–ª–∏ —Ç–∏–∫–µ—Ä —É–∂–µ –µ—Å—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if 'ticker' in df.columns:
            df['inferred_ticker'] = df['ticker']
            print(f"   ‚úì –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–ª–æ–Ω–∫—É 'ticker'")
            return df
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
        df = df.sort_values('begin').reset_index(drop=True)
        
        # –î–µ—Ç–µ–∫—Ç–∏—Ä—É–µ–º —Å–º–µ–Ω—É –ø–∞—Ç—Ç–µ—Ä–Ω–∞ (–ø–µ—Ä–µ—Ö–æ–¥ –∫ –¥—Ä—É–≥–æ–º—É —Ç–∏–∫–µ—Ä—É)
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ü–µ–Ω–æ–≤–æ–º —É—Ä–æ–≤–Ω–µ
        df['price_level'] = df['close'].rolling(10, min_periods=1).mean()
        df['price_change'] = df['price_level'].pct_change().abs()
        
        # –ë–æ–ª—å—à–∏–µ —Å–∫–∞—á–∫–∏ —Ü–µ–Ω—ã –º–æ–≥—É—Ç –æ–∑–Ω–∞—á–∞—Ç—å —Å–º–µ–Ω—É —Ç–∏–∫–µ—Ä–∞
        threshold = df['price_change'].quantile(0.95)
        df['ticker_break'] = (df['price_change'] > threshold).astype(int)
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—ã
        df['ticker_group'] = df['ticker_break'].cumsum()
        
        # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º —Ç–∏–∫–µ—Ä—ã –≥—Ä—É–ø–ø–∞–º
        unique_groups = df['ticker_group'].unique()
        group_to_ticker = {
            group: self.KNOWN_TICKERS[i % len(self.KNOWN_TICKERS)]
            for i, group in enumerate(sorted(unique_groups))
        }
        
        df['inferred_ticker'] = df['ticker_group'].map(group_to_ticker)
        
        print(f"   ‚úì –û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ {df['inferred_ticker'].nunique()} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤")
        print(f"   –¢–∏–∫–µ—Ä—ã: {sorted(df['inferred_ticker'].unique())}")
        
        return df

