"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –º–æ–¥–µ–ª–∏ FORECAST
"""
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

import pandas as pd
import numpy as np
from typing import Tuple


def calculate_metrics(y_true: np.ndarray, y_pred: np.ndarray, p_up: np.ndarray) -> dict:
    """
    –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –¥–ª—è –æ–¥–Ω–æ–≥–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞
    
    Args:
        y_true: –ò—Å—Ç–∏–Ω–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
        y_pred: –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
        p_up: –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞
        
    Returns:
        dict —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏: MAE, Brier, DA
    """
    # MAE - Mean Absolute Error
    mae = np.mean(np.abs(y_true - y_pred))
    
    # Brier Score - –¥–ª—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —Ä–æ—Å—Ç–∞
    y_up_true = (y_true > 0).astype(int)  # 1 –µ—Å–ª–∏ —Ä–æ—Å—Ç, 0 –µ—Å–ª–∏ –ø–∞–¥–µ–Ω–∏–µ
    brier = np.mean((y_up_true - p_up) ** 2)
    
    # DA - Direction Accuracy
    y_up_pred = (p_up > 0.5).astype(int)
    da = np.mean((np.sign(y_true) == np.sign(y_up_pred - 0.5)))
    
    return {
        'MAE': mae,
        'Brier': brier,
        'DA': da
    }


def calculate_score(mae: float, brier: float, da: float,
                   mae_baseline: float = None, 
                   brier_baseline: float = None) -> float:
    """
    –†–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–π –º–µ—Ç—Ä–∏–∫–∏ Score
    
    Score = 0.7 * MAE_norm + 0.3 * Brier_norm + 0.1 * DA
    
    –≥–¥–µ MAE_norm = 1 - MAE/MAE_baseline
        Brier_norm = 1 - Brier/Brier_baseline
    """
    if mae_baseline is not None and brier_baseline is not None:
        mae_norm = 1 - mae / mae_baseline
        brier_norm = 1 - brier / brier_baseline
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç baseline, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–∞–∫, —á—Ç–æ–±—ã Score –±—ã–ª –æ—Ç 0 –¥–æ 1
        mae_norm = 1 - min(mae, 1.0)  # MAE –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å > 1
        brier_norm = 1 - min(brier, 1.0)  # Brier –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å > 1
    
    score = 0.7 * mae_norm + 0.3 * brier_norm + 0.1 * da
    
    return score


def evaluate_submission(submission_path: str, test_data_path: str = None):
    """
    –û—Ü–µ–Ω–∫–∞ submission —Ñ–∞–π–ª–∞
    
    Args:
        submission_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏
        test_data_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –∏—Å—Ç–∏–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    """
    print("=" * 70)
    print("üìä –û–¶–ï–ù–ö–ê SUBMISSION")
    print("=" * 70)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º submission
    print(f"\nüìÇ –ó–∞–≥—Ä—É–∑–∫–∞ submission: {submission_path}")
    submission = pd.read_csv(submission_path)
    
    print(f"   ‚úì –°—Ç—Ä–æ–∫: {len(submission)}")
    print(f"   ‚úì –ö–æ–ª–æ–Ω–æ–∫: {len(submission.columns)}")
    print(f"   ‚úì –¢–∏–∫–µ—Ä–æ–≤: {submission['ticker'].nunique()}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç
    required_cols = ['ticker'] + [f'p{i}' for i in range(1, 21)]
    missing_cols = set(required_cols) - set(submission.columns)
    if missing_cols:
        print(f"\n   ‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: {missing_cols}")
        return
    
    print(f"\n   ‚úÖ –§–æ—Ä–º–∞—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
    prob_cols = [f'p{i}' for i in range(1, 21)]
    
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π:")
    for col in prob_cols[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –≥–æ—Ä–∏–∑–æ–Ω—Ç–æ–≤
        print(f"   {col}: mean={submission[col].mean():.4f}, "
              f"std={submission[col].std():.4f}, "
              f"min={submission[col].min():.4f}, "
              f"max={submission[col].max():.4f}")
    
    print(f"   ... (–∏ –µ—â–µ {len(prob_cols)-5} –≥–æ—Ä–∏–∑–æ–Ω—Ç–æ–≤)")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [0, 1]
    for col in prob_cols:
        if submission[col].min() < 0 or submission[col].max() > 1:
            print(f"\n   ‚ö†Ô∏è  –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –≤ {col} –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ [0, 1]!")
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å test –¥–∞–Ω–Ω—ã–µ —Å —Ç–∞—Ä–≥–µ—Ç–∞–º–∏, —Å—á–∏—Ç–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
    if test_data_path and Path(test_data_path).exists():
        print(f"\nüìÇ –ó–∞–≥—Ä—É–∑–∫–∞ test –¥–∞–Ω–Ω—ã—Ö: {test_data_path}")
        test_data = pd.read_csv(test_data_path)
        test_data['begin'] = pd.to_datetime(test_data['begin'])
        
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —Ç–∞—Ä–≥–µ—Ç–æ–≤
        print(f"   ‚ö†Ô∏è  –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –ø–æ test –¥–∞–Ω–Ω—ã–º –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")
    else:
        print(f"\n   ‚ÑπÔ∏è  Test –¥–∞–Ω–Ω—ã–µ —Å —Ç–∞—Ä–≥–µ—Ç–∞–º–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã")
    
    print("\n" + "=" * 70)
    print("‚úÖ –û–¶–ï–ù–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
    print("=" * 70)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description='–û—Ü–µ–Ω–∫–∞ submission —Ñ–∞–π–ª–∞')
    parser.add_argument('submission', type=str, help='–ü—É—Ç—å –∫ submission —Ñ–∞–π–ª—É')
    parser.add_argument('--test-data', type=str, default=None,
                       help='–ü—É—Ç—å –∫ test –¥–∞–Ω–Ω—ã–º —Å —Ç–∞—Ä–≥–µ—Ç–∞–º–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)')
    
    args = parser.parse_args()
    
    evaluate_submission(args.submission, args.test_data)


if __name__ == "__main__":
    main()

